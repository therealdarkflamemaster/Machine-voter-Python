import Chiffrrement.ElGamal as elgamal

# implémenter la recherche d’un grand premier p et d’un générateur g de Zp, de 512 bits minimum).
# faire reference au site https://www.belenios.org/specification.pdf

# RFC-3526-2048
# The group described in the previous section is not suitable for encoding non-homomorphic answers
# (the group_encode function of section 4.10.2). Therefore, we use a different group if the election 22
# has non-homomorphic questions. This group is the 2048-bit one defined in RFC 3526:
# p of Zp
p = "32317006071311007300338913926423828248817941241140239112842009751400741706634354222619689417363569347117901737909704191754605873209195028853758986185622153212175412514901774520270235796078236248884246189477587641105928646099411723245426622522193230540919037680524235519125679715870117001058055877651038861847280257976054903569732561526167081339361799541336476559160368317896729073178384589680639671900977202194168647225871031411336429319536193471636533209717077448227988588565369208645296636077250268955505928362751121174096972998068410554359584866583291642136218231078990999448652468262416972035911852507045361090559 "
# generator g
g = 2

q = "16158503035655503650169456963211914124408970620570119556421004875700370853317177111309844708681784673558950868954852095877302936604597514426879493092811076606087706257450887260135117898039118124442123094738793820552964323049705861622713311261096615270459518840262117759562839857935058500529027938825519430923640128988027451784866280763083540669680899770668238279580184158948364536589192294840319835950488601097084323612935515705668214659768096735818266604858538724113994294282684604322648318038625134477752964181375560587048486499034205277179792433291645821068109115539495499724326234131208486017955926253522680545279"

# the above numbers are too big to calculate
# generate two new ones to be used with the bulletin, Zero-knowledge proof
prime_bulletin = elgamal.find_prime(256, 32)
g_bulletin = elgamal.find_primitive_root(prime_bulletin)